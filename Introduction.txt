Members:
Waleed Zaman 23-st-001
Muhammad Saad 23-st-035

Online Hotel Management System

#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

class RoomRates {
private:
    map<string, double> roomPrices;

public:
    RoomRates() {
        roomPrices["Single"] = 100.0;
        roomPrices["Double"] = 150.0;
        roomPrices["Suite"] = 200.0;
    }

    double getPrice(const string& roomType) {
        if (roomPrices.find(roomType) != roomPrices.end()) {
            return roomPrices[roomType];
        }
        return 0.0;
    }

    void setPrice(const string& roomType, double price) {
        roomPrices[roomType] = price;
    }

    void displayRoomPrices() {
        cout << "Room Prices:" << endl;
        for (const auto& pair : roomPrices) {
            cout << pair.first << ": $" << pair.second << " per night" << endl;
        }
        cout << endl;
    }
};
class RoomDetails {
private:
    string roomType;
    bool wifiAvailable;
    bool tvAvailable;
    string view;

public:
    RoomDetails(const string& type, bool wifi, bool tv, const string& roomView) {
        roomType = type;
        wifiAvailable = wifi;
        tvAvailable = tv;
        view = roomView;
    }

    void displayRoomDetails() {
        cout << "Room Type: " << roomType << endl;
        cout << "WiFi: " << (wifiAvailable ? "Available" : "Not Available") << endl;
        cout << "TV: " << (tvAvailable ? "Available" : "Not Available") << endl;
        cout << "View: " << view << endl;
    }
};

class UserAuthenticator {
private:
    map<string, string> users;
    map<string, string> userRoles;
    map<string, bool> signedUpUsers;

public:
    UserAuthenticator() {}

    bool authenticateUser(const string& username, const string& password) {
        map<string, string>::iterator it = users.find(username);
        if (it != users.end() && it->second == password) {
            cout << "User authenticated successfully!" << endl;
            return true;
        }
        cout << "Invalid username or password." << endl;
        return false;
    }

    bool hasSignedUp(const string& username) {
        return signedUpUsers[username];
    }

    string authorizeUser(const string& username) {
        map<string, string>::iterator it = userRoles.find(username);
        if (it != userRoles.end()) {
            return it->second;
        }
        return "";
    }

    void signUp(const string& username, const string& password, const string& role) {
        users[username] = password;
        userRoles[username] = role;
        signedUpUsers[username] = true;
        cout << "Sign up successful!" << endl;
    }

    void displayRoomDetails() {
        RoomDetails singleRoom("Single", true, true, "City View");
        RoomDetails doubleRoom("Double", true, true, "Garden View");
        RoomDetails suiteRoom("Suite", true, true, "Ocean View");

        cout << "Room Details:" << endl;
        cout << "1. Single Room" << endl;
        singleRoom.displayRoomDetails();
        cout << endl;

        cout << "2. Double Room" << endl;
        doubleRoom.displayRoomDetails();
        cout << endl;

        cout << "3. Suite Room" << endl;
        suiteRoom.displayRoomDetails();
        cout << endl;
    }

    void bookRoom() {
        cout << "Available Rooms:" << endl;
        cout << "1. Single Room" << endl;
        cout << "2. Double Room" << endl;
        cout << "3. Suite Room" << endl;

        int roomChoice;
        cout << "Enter room choice (1/2/3): ";
        cin >> roomChoice;

        string roomType;
        switch(roomChoice) {
            case 1:
                roomType = "Single";
                break;
            case 2:
                roomType = "Double";
                break;
            case 3:
                roomType = "Suite";
                break;
            default:
                cout << "Invalid room choice!" << endl;
                return;
        }

        cout << "You have chosen to book a " << roomType << " room." << endl;
    }
};

class PaymentProcessor {
public:
    void processPayment() {
        cout << "Please enter your payment details:" << endl;
        string paymentDetails;
        cout << "Enter credit/debit card details: ";
        cin >> paymentDetails;
        cout << "Payment processed successfully!" << endl;
    }
};

class RoomAvailability {
private:
    map<string, int> roomAvailability;

public:
    RoomAvailability() {
        roomAvailability["Single"] = 5;
        roomAvailability["Double"] = 3;
        roomAvailability["Suite"] = 2;
    }

    bool isRoomAvailable(const string& roomType) {
        return roomAvailability[roomType] > 0;
    }

    void bookRoom(const string& roomType) {
        if (roomAvailability[roomType] > 0) {
            roomAvailability[roomType]--;
            cout << "Booking successful! You have booked a " << roomType << " room." << endl;
        } else {
            cout << "Sorry, " << roomType << " rooms are currently unavailable." << endl;
        }
    }

    void checkIn(const string& roomType) {
        if (roomAvailability.find(roomType) != roomAvailability.end()) {
            cout << "Welcome! You have checked in to a " << roomType << " room." << endl;
        } else {
            cout << "You have not booked any room. Please book a room first." << endl;
        }
    }

    void checkOut(const string& roomType) {
        if (roomAvailability.find(roomType) != roomAvailability.end()) {
            roomAvailability[roomType]++;
            cout << "Thank you for staying with us. Goodbye!" << endl;
        } else {
            cout << "You have not checked in yet." << endl;
        }
    }

    void updateRoomAvailability(const string& roomType, int count) {
        roomAvailability[roomType] = count;
        cout << "Room availability updated successfully!" << endl;
    }

    void displayRoomAvailability() {
        cout << "Room Availability:" << endl;
        for (const auto& pair : roomAvailability) {
            cout << pair.first << " Room: " << pair.second << endl;
        }
    }
};

